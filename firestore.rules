rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users collection: user-specific data like enrolledCourses and communities
    match /users/{userId} {
      // Allow read if the user is authenticated and it's their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow write if the user is authenticated and it's their own document
      allow write: if request.auth != null && request.auth.uid == userId &&
                     // Validate the structure of the write
                     (
                       // Allow creation with required fields during signup
                       (request.resource.data.keys().hasAll(['email', 'enrolledCourses', 'communities', 'createdAt']) &&
                        request.resource.data.enrolledCourses is list &&
                        request.resource.data.communities is list &&
                        request.resource.data.email is string &&
                        request.resource.data.createdAt is timestamp) ||
                       // Allow updates to enrolledCourses and communities
                       (resource != null &&
                        request.resource.data.keys().hasOnly(['email', 'enrolledCourses', 'communities', 'createdAt', 'isAdmin']) &&
                        request.resource.data.enrolledCourses is list &&
                        request.resource.data.communities is list)
                     );
    }

    // Courses collection: course details
    match /courses/{courseId} {
      // Allow read for authenticated users
      allow read: if request.auth != null;
      // Allow write for admins only
      allow write: if request.auth != null && isAdmin() &&
                    // Validate course structure
                    request.resource.data.keys().hasAll(['imageUrl', 'title', 'description', 'price', 'slug', 'createdAt']) &&
                    request.resource.data.imageUrl is string &&
                    request.resource.data.title is string &&
                    request.resource.data.description is string &&
                    request.resource.data.price is string &&
                    request.resource.data.slug is string &&
                    request.resource.data.createdAt is timestamp;
    }

    // Modules collection: lessons for courses
    match /modules/{moduleId} {
      // Allow read for authenticated users
      allow read: if request.auth != null;
      // Allow write for admins only
      allow write: if request.auth != null && isAdmin() &&
                    // Validate module structure
                    request.resource.data.keys().hasAll(['lessonTitle', 'videoLink', 'courseId', 'createdAt']) &&
                    request.resource.data.lessonTitle is string &&
                    request.resource.data.videoLink is string &&
                    request.resource.data.courseId is string &&
                    request.resource.data.createdAt is timestamp;
    }

    // Resources collection: course resources
    match /resources/{resourceId} {
      // Allow read for authenticated users
      allow read: if request.auth != null;
      // Allow write for admins only
      allow write: if request.auth != null && isAdmin() &&
                    // Validate resource structure
                    request.resource.data.keys().hasAll(['title', 'fileUrl', 'courseId', 'createdAt']) &&
                    request.resource.data.title is string &&
                    request.resource.data.fileUrl is string &&
                    request.resource.data.courseId is string &&
                    request.resource.data.createdAt is timestamp;
    }

   match /testimonials/{testimonialId} {
  allow read: if true; // Allow public read access
  allow write: if request.auth != null && isAdmin() &&
                request.resource.data.keys().hasAll(['name', 'imageUrl', 'content', 'course', 'createdAt']) &&
                request.resource.data.name is string &&
                request.resource.data.imageUrl is string &&
                request.resource.data.content is string &&
                request.resource.data.course is string &&
                request.resource.data.createdAt is timestamp;
}

    // Default rule: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
